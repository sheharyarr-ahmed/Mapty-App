'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10); //not an good pracrice to create id's because id are generated by using the libraries
  clicks = 0;
  constructor(coords, distance, duration) {
    this.coords = coords; //[lat, log]
    this.distance = distance;
    this.duration = duration;
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

class Running extends Workout {
  type = 'running';
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace(); // using teh cosntrucotr to immediately calculate the pace
    this._setDescription();
  }

  calcPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}
class Cycling extends Workout {
  type = 'cycling';
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed(); //using teh cosntrucotr to immediately calculate the speed
    this._setDescription();
  }

  calcSpeed() {
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([34, -10], 45, 30, 10);
// const cyclingn1 = new Cycling([34, -10], 45, 30, 10);
// console.log(run1);
// console.log(cyclingn1);
//setting up the global variables
// let map, mapEvent; no need of these global classes anymore

//implmenting the architecture of the app
class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];
  constructor() {
    // In the constructor, we add event listeners and call initialization methods so that when an App object is created, these listeners are set up immediately. This happens after the script is loaded and executed, not before.
    //methods in the constructor are immediately triggered when the page loads
    this._getPosition();
    form.addEventListener('submit', this._newWorkout.bind(this)); //here this new workout is an event handler function which is an function of event handler and the value of this in the event listenrers is pointing towrds teh dom element not the app object herefore we use bind method and pass this in it to point towards the app object.

    //selecting the type of form for runnning and cycling
    inputType.addEventListener('change', this._toggleElevationField); // here we dont need to use the bind method because in the function there was no this keyword used.
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));

    this._getLocalStorage();
  }
  _getPosition() {
    // experimenting with the geo-location API and adding the map via leaflet library
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Could not get your position!');
        }
      );
  }
  _loadMap(position) {
    //this api accepts two call back functionsone when successfully find the geo locationand the other if it fails to find the geo location
    // console.log(hey); //was experimenting added an anohter file in the html index and was experimenting on how to connect more than one scripts.
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},16z?entry=ttu&g_ep=EgoyMDI1MDgyNC4wIKXMDSoASAFQAw%3D%3D`
    );

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);
    //adding the putting the marker on click on map, here map.on is acting an event-listener provided by the library itself, read docs for more
    this.#map.on('click', this._showForm.bind(this)); //this is an event listener here the on method is represenitg an event listener method as it made from api

    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }
  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
    console.log(mapE);
  }

  _hideForm() {
    //empty the inputs
    inputDistance.value =
      inputCadence.value =
      inputElevation.value =
      inputDuration.value =
        '';

    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }
  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }
  _newWorkout(e) {
    //helper functions, be carefull thats the rest operator as its used in function definition which means to gther the aruguments passed into an array named array
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));
    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    // get the data from the form
    const type = inputType.value;
    const distance = +inputDistance.value; //converting into number becauss einout fields always returns strings.
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;
    // if workout Running, create running object
    if (type === 'running') {
      const cadence = +inputCadence.value;
      // checking if the data entered is valid
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert(`Inputs has to be positive numbers.`);

      workout = new Running([lat, lng], distance, duration, cadence);
    }
    // if workout Cycling, create cycling object
    if (type === 'cycling') {
      const elevation = +inputElevation.value;
      // checking if the data entered is valid
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration) //elevation can be negative
      )
        return alert(`Inputs has to be positive numbers.`);
      workout = new Cycling([lat, lng], distance, duration, elevation);
    }
    // Add new object to workout array
    this.#workouts.push(workout);
    console.log(workout);
    // render the workout on map as marker
    //submit pressing enter then the marker will appear
    e.preventDefault();
    inputDistance.value =
      inputCadence.value =
      inputElevation.value =
      inputDuration.value =
        '';
    //display workout marker
    this._renderWorkoutMarker(workout);

    // const { lat, lng } = this.#mapEvent.latlng;
    // render the workout on list
    this._renderWorkout(workout);
    // hide the form and clear input fields
    this._hideForm();
    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    //all of the chained mehthods below are the properties of api, see the docs
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉüèª‚Äç‚ôÇÔ∏è' : 'üö¥üèª'} ${workout.description}`
      )
      .openPopup();
  }

  _renderWorkout(workout) {
    let html = `
    <li class="workout workout--${workout.type}" data-id="${workout.id}">
      <h2 class="workout__title">${workout.description}</h2>
      <div class="workout__details">
        <span class="workout__icon">${
          workout.type === 'running' ? 'üèÉüèª‚Äç‚ôÇÔ∏è' : 'üö¥üèª'
        }</span>
        <span class="workout__value">${workout.distance}</span>
        <span class="workout__unit">km</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚è±</span>
        <span class="workout__value">${workout.duration}</span>
        <span class="workout__unit">min</span>
      </div>
  `;

    if (workout.type === 'running') {
      html += `
      <div class="workout__details">
        <span class="workout__icon">‚ö°Ô∏è</span>
        <span class="workout__value">${workout.pace.toFixed(1)}</span>
        <span class="workout__unit">min/km</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">ü¶∂üèº</span>
        <span class="workout__value">${workout.cadence}</span>
        <span class="workout__unit">spm</span>
      </div>
    </li>
    `;
    }

    if (workout.type === 'cycling') {
      html += `
      <div class="workout__details">
        <span class="workout__icon">‚ö°Ô∏è</span>
        <span class="workout__value">${workout.speed.toFixed(1)}</span>
        <span class="workout__unit">km/h</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚õ∞</span>
        <span class="workout__value">${workout.elevationGain}</span>
        <span class="workout__unit">m</span>
      </div>
    </li>
    `;
    }
    form.insertAdjacentHTML('afterend', html);
  }
  _moveToPopup(e) {
    const workoutEl = e.target.closest('.workout');
    console.log(workoutEl);

    if (!workoutEl) return;
    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );
    console.log(workout);

    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // using the public interface
    // workout.click();// this method was deleted because down the the workout object was converted into an string and because of this it looses its prototype where it contains all the instances methods therefore we are letting this functionality on loose.
  }

  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    console.log(data);

    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }

  reset() {
    localStorage.removeItem('workouts'); //built in
    location.reload(); //built in
  }
}

const app = new App();
